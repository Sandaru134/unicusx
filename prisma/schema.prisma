generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Unicus_User_sequence {
  number Int @id
}

model Institute_User_sequence {
  number Int @id
}

model Student_User_sequence {
  number Int @id
}

model Teacher_User_sequence {
  number Int @id
}

model Principal_User_sequence {
  number Int @id
}

model unicus_admin {
  username  String  @id @unique
  password  String
  name      String
  image_url String?
}

model Institute_admin {
  institute_id String   @id @unique
  index        String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  institutes Institutes @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
}

model Institutes {
  institute_id    String                     @id @default(uuid())
  institute_name  String
  gender          String
  institute_type  String
  type            String
  from            Int
  to              Int
  contact_number  Int
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  institute_admin Institute_admin?
  terms           Terms[]
  subjects        Subjects[]
  teachers        Teachers[]
  classes         Classes[]
  students        Students[]
  principal       Principals[]
  subject_status  Institute_subject_status[]
  student_subject Student_subjects_Status[]
  marks           Marks[]
  report          Report[]
  term_class      Term_class[]
  full_report     Final_Report[]
}

model Terms {
  term_id      String         @id @default(uuid())
  term_name    String
  start        String
  end          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  institute    Institutes     @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  institute_id String
  term_class   Term_class[]
  marks        Marks[]
  completed    Boolean        @default(false)
  report       Report[]
  full_report  Final_Report[]
}

model Term_class {
  id               String      @id @default(uuid())
  institute_id     String
  institute        Institutes  @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  teacher_signed   Boolean     @default(false)
  principal_signed Boolean     @default(false)
  teacher_id       String?
  teacher          Teachers?   @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  principal_id     String?
  principal        Principals? @relation(fields: [principal_id], references: [principal_id], onDelete: Cascade)
  term_id          String
  term             Terms       @relation(fields: [term_id], references: [term_id], onDelete: Cascade)
  class_id         String
  class            Classes     @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Subjects {
  subject_id       String                     @id @default(uuid())
  name             String
  institute_type   String
  category         String
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  institute        Institutes[]
  institute_status Institute_subject_status[]
  teachers         teacher_subjects[]
  students         Student_subjects_Status[]
  full_report      Final_Report[]
  marks            Marks[]
}

model Institute_subject_status {
  id           String     @id @default(uuid())
  institute_id String
  subject_id   String
  status       Boolean    @default(false)
  institute    Institutes @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  subject      Subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
}

model Classes {
  class_id        String                    @id @default(uuid())
  grade_level     Int
  class_name      String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  institute       Institutes                @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  institute_id    String
  teacher         Teachers[]
  students        Students[]
  subjects        teacher_subjects[]
  term_class      Term_class[]
  student_subject Student_subjects_Status[]
  marks           Marks[]
  report          Report[]
}

model Teachers {
  teacher_id          String             @id @default(uuid())
  index               String             @unique
  nic                 String
  password            String
  full_name           String
  gender              String
  contact_number      Int
  class_teacher       Boolean            @default(false)
  subject_teacher     Boolean            @default(false)
  left                Boolean            @default(false)
  date_of_resignation DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  institute           Institutes         @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  institute_id        String
  class               Classes?           @relation(fields: [class_id], references: [class_id], onUpdate: Cascade)
  class_id            String?
  teacher_subjects    teacher_subjects[]
  term_class          Term_class[]
  final_report        Final_Report[]
  report              Report[]
}

model teacher_subjects {
  id         String   @id @default(uuid())
  teacher_id String
  teacher    Teachers @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  class      Classes  @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  class_id   String
  medium     String
  subject    Subjects @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
  subject_id String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Principals {
  principal_id        String         @id @default(uuid())
  index               String         @unique
  nic                 String
  full_name           String
  gender              String
  type                String
  grade               String
  contact_number      Int
  left                Boolean        @default(false)
  date_of_resignation DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  institute           Institutes     @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  institute_id        String
  term_class          Term_class[]
  final_report        Final_Report[]
}

model Students {
  student_id          String                    @id @default(uuid())
  index               String                    @unique
  nic                 String?
  full_name           String
  gender              String
  date_of_birth       String
  medium              String
  student_type        String
  guardian_nic        String
  contact_number      Int
  left                Boolean                   @default(false)
  date_of_resignation DateTime?
  classes             Classes                   @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  class_id            String
  institute           Institutes                @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  institute_id        String
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  subjects            Student_subjects_Status[]
  report              Report[]
  marks               Marks[]
  full_report         Final_Report[]
}

model Student_subjects_Status {
  id           String     @id @default(uuid())
  student_id   String
  student      Students   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  subject_id   String
  subject      Subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
  institute_id String
  institute    Institutes @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  added        Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  class_id     String
  class        Classes    @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
}

model Marks {
  id                 String     @id @default(uuid())
  student_id         String
  student            Students   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  student_subject_id String
  subject_id         String
  subject            Subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
  term_id            String
  terms              Terms      @relation(fields: [term_id], references: [term_id], onDelete: Cascade)
  class_id           String
  class              Classes    @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  mark               Float?
  institute_id       String
  institute          Institutes @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  absent             Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Report {
  id                   String         @id @default(uuid())
  institute_id         String
  institute            Institutes     @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  student_id           String
  student              Students       @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  term_id              String
  terms                Terms          @relation(fields: [term_id], references: [term_id], onDelete: Cascade)
  class_id             String
  class                Classes        @relation(fields: [class_id], references: [class_id], onDelete: Cascade)
  completed            Boolean?       @default(false)
  class_teacher_signed Boolean?       @default(false)
  teacher_id           String?
  teacher              Teachers?      @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  principal_signed     Boolean?       @default(false)
  total_marks          Float?
  total_students       Int?
  total_subjects       Int?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  final_report         Final_Report[]
}

model Final_Report {
  id                    String     @id @default(uuid())
  report_id             String
  report                Report     @relation(fields: [report_id], references: [id], onDelete: Cascade)
  institute_id          String
  institute             Institutes @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  student_id            String
  student               Students   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  term_id               String
  terms                 Terms      @relation(fields: [term_id], references: [term_id], onDelete: Cascade)
  subject_id            String
  subject               Subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
  mark                  Float?
  change                Int?
  pass                  String
  total_marks           Float?
  highest_total_mark    Float
  total_students        Int
  average               Float
  rank                  Int?
  teacher_id            String
  teacher               Teachers   @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)
  teacher_signed_date   DateTime?
  principal_id          String
  principal             Principals @relation(fields: [principal_id], references: [principal_id], onDelete: Cascade)
  principal_signed_date DateTime?
  next_term_start_date  String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}
