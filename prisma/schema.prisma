// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User_sequence {
  id Int @id @default(autoincrement())
}

model unicus_admin {
  username  String  @id @unique
  password  String
  name      String
  image_url String?
}

model Institute_admin {
  institute_id String   @id @unique
  index        String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  institutes Institutes @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
}

model Institutes {
  institute_id      String                     @id @default(uuid())
  institute_initial String                     @unique
  institute_name    String
  gender            String
  institute_type    String
  type              String
  from              Int
  to                Int
  contact_number    Int
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  institute_admin   Institute_admin?
  terms             Terms[]
  subjects          Subjects[]
  teachers          Teachers[]
  classes           Classes[]
  students          Students[]
  principal         Principals[]
  subject_status    Institute_subject_status[]
  student_subject   Student_subjects_Status[]
  marks             marks[]
  report            Report[]
}

model Terms {
  term_id         String                    @id @default(uuid())
  term_name       String
  start           String
  end             String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  institute       Institutes                @relation(fields: [institute_id], references: [institute_id])
  institute_id    String
  term_class      Term_class[]
  student_subject Student_subjects_Status[]
  marks           marks[]
  completed       Boolean                   @default(false)
  report          Report[]
}

model Term_class {
  id               String  @id @default(uuid())
  teacher_signed   Boolean @default(false)
  principal_signed Boolean @default(false)
  term_id          String
  term             Terms   @relation(fields: [term_id], references: [term_id])
  class_id         String
  class            Classes @relation(fields: [class_id], references: [class_id])
}

model Subjects {
  subject_id       String                     @id @default(uuid())
  name             String
  institute_type   String
  category         String
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  institute        Institutes[]
  institute_status Institute_subject_status[]
  teachers         teacher_subjects[]
  students         Student_subjects_Status[]
}

model Institute_subject_status {
  id           String     @id @default(uuid())
  institute_id String
  subject_id   String
  status       Boolean    @default(false)
  institute    Institutes @relation(fields: [institute_id], references: [institute_id])
  subject      Subjects   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
}

model Classes {
  class_id        String                    @id @default(uuid())
  grade_level     Int
  class_name      String
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  institute       Institutes                @relation(fields: [institute_id], references: [institute_id])
  institute_id    String
  teacher         Teachers[]
  students        Students[]
  subjects        teacher_subjects[]
  term_class      Term_class[]
  student_subject Student_subjects_Status[]
  marks           marks[]
  report          Report[]
}

model Teachers {
  teacher_id          String             @id @default(uuid())
  index               String             @unique
  nic                 String             @unique
  password            String
  full_name           String
  gender              String
  contact_number      Int
  class_teacher       Boolean            @default(false)
  subject_teacher     Boolean            @default(false)
  left                Boolean            @default(false)
  date_of_resignation DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  institute           Institutes         @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  institute_id        String
  class               Classes?           @relation(fields: [class_id], references: [class_id], onUpdate: Cascade)
  class_id            String?            @unique
  teacher_subjects    teacher_subjects[]
}

model teacher_subjects {
  id         String   @id @default(uuid())
  teacher_id String
  teacher    Teachers @relation(fields: [teacher_id], references: [teacher_id])
  class      Classes  @relation(fields: [class_id], references: [class_id])
  class_id   String
  medium     String
  subject    Subjects @relation(fields: [subject_id], references: [subject_id])
  subject_id String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Principals {
  principal_id        String     @id @default(uuid())
  index               String     @unique
  nic                 String     @unique
  password            String
  full_name           String
  gender              String
  type                String
  grade               String
  contact_number      Int
  left                Boolean    @default(false)
  date_of_resignation DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  institute           Institutes @relation(fields: [institute_id], references: [institute_id])
  institute_id        String
}

model Students {
  student_id          String                    @id @default(uuid())
  index               String                    @unique
  nic                 String?                   @unique
  full_name           String
  gender              String
  date_of_birth       String
  medium              String
  student_type        String
  guardian_nic        String
  contact_number      Int
  left                Boolean                   @default(false)
  date_of_resignation DateTime?
  classes             Classes                   @relation(fields: [class_id], references: [class_id])
  class_id            String
  institute           Institutes                @relation(fields: [institute_id], references: [institute_id])
  institute_id        String
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  subjects            Student_subjects_Status[]
  report              Report[]
}

model Student_subjects_Status {
  id           String     @id @default(uuid())
  student_id   String
  student      Students   @relation(fields: [student_id], references: [student_id])
  subject_id   String
  subject      Subjects   @relation(fields: [subject_id], references: [subject_id])
  institute_id String
  institute    Institutes @relation(fields: [institute_id], references: [institute_id])
  added        Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  class_id     String
  class        Classes    @relation(fields: [class_id], references: [class_id])
  marks        marks[]
  Terms        Terms?     @relation(fields: [terms_id], references: [term_id])
  terms_id     String?
  completed    Boolean    @default(false)
}

model marks {
  id                 String                  @id @default(uuid())
  student_subject_id String
  student_subject    Student_subjects_Status @relation(fields: [student_subject_id], references: [id], onDelete: Cascade)
  term_id            String
  terms              Terms                   @relation(fields: [term_id], references: [term_id])
  class_id           String
  class              Classes                 @relation(fields: [class_id], references: [class_id])
  mark               Int?
  institute_id       String
  institute          Institutes              @relation(fields: [institute_id], references: [institute_id], onDelete: Cascade)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
}

model Report {
  id                   String     @id @default(uuid())
  institute_id         String
  institute            Institutes @relation(fields: [institute_id], references: [institute_id])
  student_id           String
  student              Students   @relation(fields: [student_id], references: [student_id])
  term_id              String
  terms                Terms      @relation(fields: [term_id], references: [term_id])
  class_id             String
  class                Classes    @relation(fields: [class_id], references: [class_id])
  completed            Boolean?   @default(false)
  class_teacher_signed Boolean?   @default(false)
  principal_signed     Boolean?   @default(false)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}
